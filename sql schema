--
-- PostgreSQL database dump
--

-- Dumped from database version 15.12 (Debian 15.12-1.pgdg120+1)
-- Dumped by pg_dump version 16.4 (Homebrew)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: pg_trgm; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;


--
-- Name: EXTENSION pg_trgm; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams';


--
-- Name: pgaudit; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgaudit WITH SCHEMA public;


--
-- Name: EXTENSION pgaudit; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgaudit IS 'provides auditing functionality';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: color_sensitivity_diagnostic; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.color_sensitivity_diagnostic AS ENUM (
    'adult',
    'senior',
    'older_children'
);


ALTER TYPE public.color_sensitivity_diagnostic OWNER TO postgres;

--
-- Name: color_sensitivity_section; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.color_sensitivity_section AS ENUM (
    'general',
    'tritan',
    'protan',
    'deutan',
    'legacy'
);


ALTER TYPE public.color_sensitivity_section OWNER TO postgres;

--
-- Name: color_sensitivity_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.color_sensitivity_type AS ENUM (
    'waggoner_ccvt',
    'ishihara_cst'
);


ALTER TYPE public.color_sensitivity_type OWNER TO postgres;

--
-- Name: direction; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.direction AS ENUM (
    'up',
    'down',
    'left',
    'right'
);


ALTER TYPE public.direction OWNER TO postgres;

--
-- Name: eye; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.eye AS ENUM (
    'left',
    'right',
    'both'
);


ALTER TYPE public.eye OWNER TO postgres;

--
-- Name: fixation_target; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.fixation_target AS ENUM (
    'central_point',
    'diamond'
);


ALTER TYPE public.fixation_target OWNER TO postgres;

--
-- Name: plate_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.plate_type AS ENUM (
    'number',
    'trace'
);


ALTER TYPE public.plate_type OWNER TO postgres;

--
-- Name: ptosis_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.ptosis_type AS ENUM (
    'static',
    'dynamic'
);


ALTER TYPE public.ptosis_type OWNER TO postgres;

--
-- Name: pupillography_stimuli_color; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.pupillography_stimuli_color AS ENUM (
    'white',
    'blue_then_red',
    'red_then_blue'
);


ALTER TYPE public.pupillography_stimuli_color OWNER TO postgres;

--
-- Name: role_domain; Type: DOMAIN; Schema: public; Owner: postgres
--

CREATE DOMAIN public.role_domain AS text
	CONSTRAINT role_domain_check CHECK ((VALUE = ANY (ARRAY['ADMIN'::text, 'TECHNICIAN'::text, 'LICENSE_ADMIN'::text, 'DEVICE'::text])));


ALTER DOMAIN public.role_domain OWNER TO postgres;

--
-- Name: sex; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.sex AS ENUM (
    'male',
    'female',
    'unknown'
);


ALTER TYPE public.sex OWNER TO postgres;

--
-- Name: status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.status AS ENUM (
    'ORDERED',
    'QUEUED',
    'IN_PROGRESS',
    'COMPLETED',
    'PAUSED',
    'CANCELED'
);


ALTER TYPE public.status OWNER TO postgres;

--
-- Name: stimulus_size; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.stimulus_size AS ENUM (
    'I',
    'II',
    'III',
    'IV',
    'V',
    'VI'
);


ALTER TYPE public.stimulus_size OWNER TO postgres;

--
-- Name: stimulus_speed; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.stimulus_speed AS ENUM (
    'slow',
    'normal',
    'fast'
);


ALTER TYPE public.stimulus_speed OWNER TO postgres;

--
-- Name: threshold_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.threshold_type AS ENUM (
    'f_pos',
    'f_neg',
    't_pos',
    't_neg'
);


ALTER TYPE public.threshold_type OWNER TO postgres;

--
-- Name: visual_acuity_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.visual_acuity_type AS ENUM (
    'tumbling_e',
    'landolt_c'
);


ALTER TYPE public.visual_acuity_type OWNER TO postgres;

--
-- Name: notify_change_with_license_id(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.notify_change_with_license_id() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_ARGV[0] IS NULL THEN
      RAISE EXCEPTION 'notify_change_with_license_id() requires a channel name argument in trigger definition';
    END IF;
    IF TG_ARGV[1] IS NULL THEN
      RAISE EXCEPTION 'notify_change_with_license_id() requires a type argument in trigger definition';
    END IF;

    PERFORM pg_notify(
        TG_ARGV[0],
        json_build_object(
            'type', TG_ARGV[1],
            'payload', json_build_object(
                'id', NEW.id,
                'license_id', NEW.license_id,
                'data', row_to_json(NEW)
            )
        )::text
    );
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.notify_change_with_license_id() OWNER TO postgres;

--
-- Name: notify_delete_with_license_id(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.notify_delete_with_license_id() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_ARGV[0] IS NULL THEN
      RAISE EXCEPTION 'notify_delete_with_license_id() requires a channel name argument in trigger definition';
    END IF;
    IF TG_ARGV[1] IS NULL THEN
      RAISE EXCEPTION 'notify_delete_with_license_id() requires a type argument in trigger definition';
    END IF;

    PERFORM pg_notify(
        TG_ARGV[0],
        json_build_object(
            'type', TG_ARGV[1],
            'payload', json_build_object(
                'id', OLD.id,
                'license_id', OLD.license_id,
                'data', row_to_json(OLD)
            )
        )::text
    );
    RETURN OLD;
END;
$$;


ALTER FUNCTION public.notify_delete_with_license_id() OWNER TO postgres;

--
-- Name: notify_status_change(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.notify_status_change() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_ARGV[0] IS NULL THEN
      RAISE EXCEPTION 'notify_status_change() requires a channel name argument in trigger definition';
    END IF;
    IF TG_ARGV[1] IS NULL THEN
      RAISE EXCEPTION 'notify_status_change() requires a type argument in trigger definition';
    END IF;

    PERFORM pg_notify(
        TG_ARGV[0],
        json_build_object(
            'type', TG_ARGV[1],
            'payload', json_build_object(
                'id', NEW.id,
                'status', NEW.status,
                'license_id', NEW.license_id
            )
        )::text
    );
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.notify_status_change() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: age_bracket; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.age_bracket (
    id smallint NOT NULL,
    value text NOT NULL
);


ALTER TABLE public.age_bracket OWNER TO postgres;

--
-- Name: age_bracket_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.age_bracket_id_seq
    AS smallint
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.age_bracket_id_seq OWNER TO postgres;

--
-- Name: age_bracket_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.age_bracket_id_seq OWNED BY public.age_bracket.id;


--
-- Name: announcement; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.announcement (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    published boolean DEFAULT false NOT NULL,
    message text NOT NULL,
    start_at timestamp without time zone,
    end_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.announcement OWNER TO postgres;

--
-- Name: api_token; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.api_token (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    device_id uuid NOT NULL,
    token_hash text NOT NULL
);


ALTER TABLE public.api_token OWNER TO postgres;

--
-- Name: audit_base; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.audit_base (
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    deleted_at timestamp without time zone,
    created_by text NOT NULL,
    updated_by text NOT NULL,
    deleted_by text
);


ALTER TABLE public.audit_base OWNER TO postgres;

--
-- Name: color_sensitivity_instance; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.color_sensitivity_instance (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    eye public.eye NOT NULL,
    status public.status NOT NULL,
    type_ public.color_sensitivity_type NOT NULL,
    diagnostic public.color_sensitivity_diagnostic NOT NULL,
    dcm_uid text,
    completed_at timestamp without time zone,
    study_id uuid NOT NULL,
    current_plate integer NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.color_sensitivity_instance OWNER TO postgres;

--
-- Name: color_sensitivity_plate; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.color_sensitivity_plate (
    plate_type public.plate_type NOT NULL,
    expected_value text NOT NULL,
    section public.color_sensitivity_section NOT NULL,
    id integer NOT NULL
);


ALTER TABLE public.color_sensitivity_plate OWNER TO postgres;

--
-- Name: color_sensitivity_plate_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.color_sensitivity_plate_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.color_sensitivity_plate_id_seq OWNER TO postgres;

--
-- Name: color_sensitivity_plate_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.color_sensitivity_plate_id_seq OWNED BY public.color_sensitivity_plate.id;


--
-- Name: color_sensitivity_result; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.color_sensitivity_result (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    actual_response text NOT NULL,
    instance_id uuid NOT NULL,
    plate_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL
);


ALTER TABLE public.color_sensitivity_result OWNER TO postgres;

--
-- Name: cover_test_instance; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cover_test_instance (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    eye public.eye NOT NULL,
    status public.status NOT NULL,
    duration integer,
    dcm_uid text,
    completed_at timestamp without time zone,
    study_id uuid NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.cover_test_instance OWNER TO postgres;

--
-- Name: cover_test_result; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cover_test_result (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    eye public.eye NOT NULL,
    is_covered boolean NOT NULL,
    orientation_angle numeric NOT NULL,
    deviation_angle numeric NOT NULL,
    magnitude numeric NOT NULL,
    elapsed_time numeric NOT NULL,
    instance_id uuid NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.cover_test_result OWNER TO postgres;

--
-- Name: COLUMN cover_test_result.orientation_angle; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cover_test_result.orientation_angle IS 'Angle where 0 is on x axis on the right of the origin, 90 is y axis above origin, 180 is x axis left of the origin, and 270 is y axis below the origin.';


--
-- Name: COLUMN cover_test_result.deviation_angle; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cover_test_result.deviation_angle IS 'Angle of eye from origin to the point the patient is actually looking';


--
-- Name: COLUMN cover_test_result.magnitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cover_test_result.magnitude IS 'The distance from the origin to the point they are looking at. This is another way to report the deviationAngle.';


--
-- Name: COLUMN cover_test_result.elapsed_time; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.cover_test_result.elapsed_time IS 'Time elapsed from start of the exam instance';


--
-- Name: device; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.device (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    serial_number text,
    model text,
    is_registered boolean DEFAULT false NOT NULL,
    is_telemetry_enabled boolean DEFAULT false NOT NULL,
    office_id uuid NOT NULL,
    license_id uuid NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.device OWNER TO postgres;

--
-- Name: device_registration_code; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.device_registration_code (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    code text NOT NULL,
    expiration_date timestamp without time zone NOT NULL,
    device_id uuid NOT NULL
);


ALTER TABLE public.device_registration_code OWNER TO postgres;

--
-- Name: dicom_profile; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.dicom_profile (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    ae_title text NOT NULL,
    office_id uuid NOT NULL,
    license_id uuid NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    created_by text,
    updated_by text,
    deleted_by text
)
INHERITS (public.audit_base);


ALTER TABLE public.dicom_profile OWNER TO postgres;

--
-- Name: feature; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.feature (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    label text NOT NULL,
    name text NOT NULL,
    default_enabled boolean DEFAULT false NOT NULL,
    default_config jsonb
);


ALTER TABLE public.feature OWNER TO postgres;

--
-- Name: language; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.language (
    id smallint NOT NULL,
    value text NOT NULL
);


ALTER TABLE public.language OWNER TO postgres;

--
-- Name: language_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.language_id_seq
    AS smallint
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.language_id_seq OWNER TO postgres;

--
-- Name: language_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.language_id_seq OWNED BY public.language.id;


--
-- Name: license; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.license (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    customer_name text NOT NULL,
    data_key text NOT NULL,
    use_mrn boolean DEFAULT true NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.license OWNER TO postgres;

--
-- Name: license_feature; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.license_feature (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    enabled boolean DEFAULT false NOT NULL,
    config jsonb,
    license_id uuid NOT NULL,
    feature_id uuid NOT NULL
);


ALTER TABLE public.license_feature OWNER TO postgres;

--
-- Name: normal; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.normal (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    eye public.eye NOT NULL,
    age_bracket smallint NOT NULL
);


ALTER TABLE public.normal OWNER TO postgres;

--
-- Name: normal_age_bracket_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.normal_age_bracket_seq
    AS smallint
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.normal_age_bracket_seq OWNER TO postgres;

--
-- Name: normal_age_bracket_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.normal_age_bracket_seq OWNED BY public.normal.age_bracket;


--
-- Name: normal_threshold; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.normal_threshold (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    label text NOT NULL,
    average_decibel integer NOT NULL,
    decibel_variance numeric NOT NULL,
    decibel_deviation numeric NOT NULL,
    normal_id uuid NOT NULL
);


ALTER TABLE public.normal_threshold OWNER TO postgres;

--
-- Name: office; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.office (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    license_id uuid NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    created_by text,
    updated_by text,
    deleted_by text,
    address_line_1 text NOT NULL,
    address_line_2 text,
    city text NOT NULL,
    state text NOT NULL,
    zip text NOT NULL,
    country text NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.office OWNER TO postgres;

--
-- Name: patient; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.patient (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    middle_name text,
    date_of_birth date NOT NULL,
    sex public.sex NOT NULL,
    mrn text NOT NULL,
    license_id uuid NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.patient OWNER TO postgres;

--
-- Name: pattern; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pattern (
    name text NOT NULL,
    left_labels jsonb,
    right_labels jsonb
);


ALTER TABLE public.pattern OWNER TO postgres;

--
-- Name: pupillography_instance; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pupillography_instance (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    eye public.eye NOT NULL,
    status public.status NOT NULL,
    stimuli_color public.pupillography_stimuli_color NOT NULL,
    number_of_flips integer NOT NULL,
    consensual boolean NOT NULL,
    dark_adaptation boolean NOT NULL,
    dcm_uid text,
    completed_at timestamp without time zone,
    study_id uuid NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.pupillography_instance OWNER TO postgres;

--
-- Name: pupillography_result; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pupillography_result (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    elapsed_time numeric NOT NULL,
    pupil_diameter numeric NOT NULL,
    color_shown text NOT NULL,
    eye public.eye NOT NULL,
    instance_id uuid NOT NULL,
    created_at timestamp without time zone NOT NULL
);


ALTER TABLE public.pupillography_result OWNER TO postgres;

--
-- Name: schema_version; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.schema_version (
    version integer NOT NULL
);


ALTER TABLE public.schema_version OWNER TO postgres;

--
-- Name: strategy; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.strategy (
    name text NOT NULL,
    primary_step_size integer,
    secondary_step_size integer,
    stimulus_response_window integer DEFAULT 1000,
    stimulus_light_duration integer DEFAULT 250,
    stimulus_point_size integer DEFAULT 1,
    stimulus_light_color text DEFAULT '#F4F0EC'::text,
    fixation_point_color text DEFAULT '#FFA500'::text,
    background_surface_color text DEFAULT '#000000'::text,
    time_between_stimulus_minimum integer,
    time_between_stimulus_maximum integer,
    background_brightness integer DEFAULT 1,
    blindspot_timer integer,
    root_starting_decibel integer
);


ALTER TABLE public.strategy OWNER TO postgres;

--
-- Name: strategy_pattern; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.strategy_pattern (
    strategy text NOT NULL,
    pattern text NOT NULL,
    left_label_overrides jsonb,
    right_label_overrides jsonb
);


ALTER TABLE public.strategy_pattern OWNER TO postgres;

--
-- Name: study; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.study (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    completed_at timestamp without time zone,
    status public.status NOT NULL,
    language text NOT NULL,
    show_instructions boolean NOT NULL,
    device_version text NOT NULL,
    content_datetime timestamp without time zone,
    accession_number text,
    dcm_uid text,
    referring_physician_name text,
    device_id uuid NOT NULL,
    patient_id uuid NOT NULL,
    license_id uuid NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.study OWNER TO postgres;

--
-- Name: user_account; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_account (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    email text NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    timezone text,
    user_language text NOT NULL,
    device_language text NOT NULL,
    license_id uuid NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.user_account OWNER TO postgres;

--
-- Name: user_preference; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_preference (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    preferred_language text DEFAULT 'en'::text NOT NULL,
    default_device_language text DEFAULT 'en'::text NOT NULL,
    date_format text DEFAULT 'MM-DD-YYYY'::text NOT NULL
);


ALTER TABLE public.user_preference OWNER TO postgres;

--
-- Name: user_role; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_role (
    user_id uuid NOT NULL,
    role public.role_domain NOT NULL,
    granted_at timestamp without time zone DEFAULT now() NOT NULL,
    granted_by uuid NOT NULL
);


ALTER TABLE public.user_role OWNER TO postgres;

--
-- Name: visual_acuity_instance; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.visual_acuity_instance (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    eye public.eye NOT NULL,
    status public.status NOT NULL,
    duration integer,
    type_ public.visual_acuity_type NOT NULL,
    current_optotype integer NOT NULL,
    dcm_uid text,
    order_ integer,
    completed_at timestamp without time zone,
    study_id uuid NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.visual_acuity_instance OWNER TO postgres;

--
-- Name: visual_acuity_optotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.visual_acuity_optotype (
    id integer NOT NULL,
    type_ public.visual_acuity_type NOT NULL,
    row_ integer NOT NULL,
    "position" integer NOT NULL,
    direction public.direction NOT NULL,
    acuity text NOT NULL
);


ALTER TABLE public.visual_acuity_optotype OWNER TO postgres;

--
-- Name: visual_acuity_optotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.visual_acuity_optotype_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.visual_acuity_optotype_id_seq OWNER TO postgres;

--
-- Name: visual_acuity_optotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.visual_acuity_optotype_id_seq OWNED BY public.visual_acuity_optotype.id;


--
-- Name: visual_acuity_result; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.visual_acuity_result (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    actual_response public.direction NOT NULL,
    instance_id uuid NOT NULL,
    optotype_id integer NOT NULL
);


ALTER TABLE public.visual_acuity_result OWNER TO postgres;

--
-- Name: visual_field_instance; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.visual_field_instance (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    status public.status NOT NULL,
    eye public.eye NOT NULL,
    fixation_target public.fixation_target NOT NULL,
    use_foveal_threshold boolean NOT NULL,
    should_use_swap boolean NOT NULL,
    should_use_binocular boolean NOT NULL,
    stimulus_size public.stimulus_size NOT NULL,
    is_normal boolean NOT NULL,
    is_taped boolean NOT NULL,
    stimulus_speed public.stimulus_speed NOT NULL,
    duration integer,
    fixation_loss_time integer,
    perimetry_color text,
    fixation_point_design text,
    false_positive_trial_count integer,
    completed_at timestamp without time zone,
    pattern text NOT NULL,
    strategy text NOT NULL,
    study_id uuid NOT NULL
)
INHERITS (public.audit_base);


ALTER TABLE public.visual_field_instance OWNER TO postgres;

--
-- Name: visual_field_real_time_results; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.visual_field_real_time_results (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    label text NOT NULL,
    threshold_type public.threshold_type NOT NULL,
    decibels integer NOT NULL,
    reaction_time numeric NOT NULL,
    is_foveal boolean DEFAULT false NOT NULL,
    is_blindspot boolean DEFAULT false NOT NULL,
    is_threshold boolean DEFAULT false NOT NULL,
    instance_id uuid NOT NULL
);


ALTER TABLE public.visual_field_real_time_results OWNER TO postgres;

--
-- Name: visual_field_threshold; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.visual_field_threshold (
    id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    label text NOT NULL,
    decibels integer NOT NULL,
    is_foveal boolean DEFAULT false NOT NULL,
    was_seen boolean NOT NULL,
    instance_id uuid NOT NULL
);


ALTER TABLE public.visual_field_threshold OWNER TO postgres;

--
-- Name: age_bracket id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.age_bracket ALTER COLUMN id SET DEFAULT nextval('public.age_bracket_id_seq'::regclass);


--
-- Name: color_sensitivity_instance created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_instance ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: color_sensitivity_instance updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_instance ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: color_sensitivity_plate id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_plate ALTER COLUMN id SET DEFAULT nextval('public.color_sensitivity_plate_id_seq'::regclass);


--
-- Name: cover_test_instance created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cover_test_instance ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: cover_test_instance updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cover_test_instance ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: device created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.device ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: device updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.device ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: language id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.language ALTER COLUMN id SET DEFAULT nextval('public.language_id_seq'::regclass);


--
-- Name: license created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.license ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: license updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.license ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: normal age_bracket; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.normal ALTER COLUMN age_bracket SET DEFAULT nextval('public.normal_age_bracket_seq'::regclass);


--
-- Name: patient created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.patient ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: patient updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.patient ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: pupillography_instance created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pupillography_instance ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: pupillography_instance updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pupillography_instance ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: study created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.study ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: study updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.study ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: user_account created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_account ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: user_account updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_account ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: visual_acuity_instance created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_instance ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: visual_acuity_instance updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_instance ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: visual_acuity_optotype id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_optotype ALTER COLUMN id SET DEFAULT nextval('public.visual_acuity_optotype_id_seq'::regclass);


--
-- Name: visual_field_instance created_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_instance ALTER COLUMN created_at SET DEFAULT now();


--
-- Name: visual_field_instance updated_at; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_instance ALTER COLUMN updated_at SET DEFAULT now();


--
-- Name: age_bracket age_bracket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.age_bracket
    ADD CONSTRAINT age_bracket_pkey PRIMARY KEY (id);


--
-- Name: announcement announcement_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.announcement
    ADD CONSTRAINT announcement_pkey PRIMARY KEY (id);


--
-- Name: api_token api_token_device_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.api_token
    ADD CONSTRAINT api_token_device_id_key UNIQUE (device_id);


--
-- Name: api_token api_token_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.api_token
    ADD CONSTRAINT api_token_pkey PRIMARY KEY (id);


--
-- Name: api_token api_token_token_hash_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.api_token
    ADD CONSTRAINT api_token_token_hash_key UNIQUE (token_hash);


--
-- Name: color_sensitivity_instance color_sensitivity_instance_dcm_uid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_instance
    ADD CONSTRAINT color_sensitivity_instance_dcm_uid_key UNIQUE (dcm_uid);


--
-- Name: color_sensitivity_instance color_sensitivity_instance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_instance
    ADD CONSTRAINT color_sensitivity_instance_pkey PRIMARY KEY (id);


--
-- Name: color_sensitivity_plate color_sensitivity_plate_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_plate
    ADD CONSTRAINT color_sensitivity_plate_pkey PRIMARY KEY (id);


--
-- Name: color_sensitivity_result color_sensitivity_result_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_result
    ADD CONSTRAINT color_sensitivity_result_pkey PRIMARY KEY (id);


--
-- Name: cover_test_instance cover_test_instance_dcm_uid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cover_test_instance
    ADD CONSTRAINT cover_test_instance_dcm_uid_key UNIQUE (dcm_uid);


--
-- Name: cover_test_instance cover_test_instance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cover_test_instance
    ADD CONSTRAINT cover_test_instance_pkey PRIMARY KEY (id);


--
-- Name: cover_test_result cover_test_result_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cover_test_result
    ADD CONSTRAINT cover_test_result_pkey PRIMARY KEY (id);


--
-- Name: device device_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.device
    ADD CONSTRAINT device_pkey PRIMARY KEY (id);


--
-- Name: device_registration_code device_registration_code_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.device_registration_code
    ADD CONSTRAINT device_registration_code_pkey PRIMARY KEY (id);


--
-- Name: dicom_profile dicom_profile_ae_title_office_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dicom_profile
    ADD CONSTRAINT dicom_profile_ae_title_office_id_key UNIQUE (ae_title, office_id);


--
-- Name: dicom_profile dicom_profile_name_office_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dicom_profile
    ADD CONSTRAINT dicom_profile_name_office_id_key UNIQUE (name, office_id);


--
-- Name: dicom_profile dicom_profile_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dicom_profile
    ADD CONSTRAINT dicom_profile_pkey PRIMARY KEY (id);


--
-- Name: feature feature_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_name_key UNIQUE (name);


--
-- Name: feature feature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.feature
    ADD CONSTRAINT feature_pkey PRIMARY KEY (id);


--
-- Name: language language_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.language
    ADD CONSTRAINT language_pkey PRIMARY KEY (id);


--
-- Name: license license_data_key_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.license
    ADD CONSTRAINT license_data_key_key UNIQUE (data_key);


--
-- Name: license_feature license_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.license_feature
    ADD CONSTRAINT license_feature_pkey PRIMARY KEY (id);


--
-- Name: license license_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.license
    ADD CONSTRAINT license_pkey PRIMARY KEY (id);


--
-- Name: normal normal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.normal
    ADD CONSTRAINT normal_pkey PRIMARY KEY (id);


--
-- Name: normal_threshold normal_threshold_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.normal_threshold
    ADD CONSTRAINT normal_threshold_pkey PRIMARY KEY (id);


--
-- Name: office office_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.office
    ADD CONSTRAINT office_pkey PRIMARY KEY (id);


--
-- Name: patient patient_mrn_license_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_mrn_license_id_key UNIQUE (mrn, license_id);


--
-- Name: patient patient_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_pkey PRIMARY KEY (id);


--
-- Name: pattern pattern_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pattern
    ADD CONSTRAINT pattern_pkey PRIMARY KEY (name);


--
-- Name: pupillography_instance pupillometry_instance_dcm_uid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pupillography_instance
    ADD CONSTRAINT pupillometry_instance_dcm_uid_key UNIQUE (dcm_uid);


--
-- Name: pupillography_instance pupillometry_instance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pupillography_instance
    ADD CONSTRAINT pupillometry_instance_pkey PRIMARY KEY (id);


--
-- Name: pupillography_result pupillometry_result_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pupillography_result
    ADD CONSTRAINT pupillometry_result_pkey PRIMARY KEY (id);


--
-- Name: strategy_pattern strategy_pattern_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.strategy_pattern
    ADD CONSTRAINT strategy_pattern_pkey PRIMARY KEY (strategy, pattern);


--
-- Name: strategy strategy_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.strategy
    ADD CONSTRAINT strategy_pkey PRIMARY KEY (name);


--
-- Name: study study_dcm_uid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_dcm_uid_key UNIQUE (dcm_uid);


--
-- Name: study study_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_pkey PRIMARY KEY (id);


--
-- Name: normal unique_eye_age; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.normal
    ADD CONSTRAINT unique_eye_age UNIQUE (age_bracket, eye);


--
-- Name: user_account user_account_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_account
    ADD CONSTRAINT user_account_email_key UNIQUE (email);


--
-- Name: user_account user_account_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_account
    ADD CONSTRAINT user_account_pkey PRIMARY KEY (id);


--
-- Name: user_preference user_preference_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_preference
    ADD CONSTRAINT user_preference_pkey PRIMARY KEY (id);


--
-- Name: user_role user_role_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_role
    ADD CONSTRAINT user_role_pkey PRIMARY KEY (user_id, role);


--
-- Name: visual_acuity_instance visual_acuity_instance_dcm_uid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_instance
    ADD CONSTRAINT visual_acuity_instance_dcm_uid_key UNIQUE (dcm_uid);


--
-- Name: visual_acuity_instance visual_acuity_instance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_instance
    ADD CONSTRAINT visual_acuity_instance_pkey PRIMARY KEY (id);


--
-- Name: visual_acuity_optotype visual_acuity_optotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_optotype
    ADD CONSTRAINT visual_acuity_optotype_pkey PRIMARY KEY (id);


--
-- Name: visual_acuity_result visual_acuity_result_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_result
    ADD CONSTRAINT visual_acuity_result_pkey PRIMARY KEY (id);


--
-- Name: visual_field_instance visual_field_instance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_instance
    ADD CONSTRAINT visual_field_instance_pkey PRIMARY KEY (id);


--
-- Name: visual_field_real_time_results visual_field_real_time_results_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_real_time_results
    ADD CONSTRAINT visual_field_real_time_results_pkey PRIMARY KEY (id);


--
-- Name: visual_field_threshold visual_field_threshold_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_threshold
    ADD CONSTRAINT visual_field_threshold_pkey PRIMARY KEY (id);


--
-- Name: idx_patient_first_name_trgm; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_patient_first_name_trgm ON public.patient USING gin (first_name public.gin_trgm_ops);


--
-- Name: idx_patient_last_name_trgm; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_patient_last_name_trgm ON public.patient USING gin (last_name public.gin_trgm_ops);


--
-- Name: idx_patient_middle_name_trgm; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_patient_middle_name_trgm ON public.patient USING gin (middle_name public.gin_trgm_ops);


--
-- Name: idx_patient_mrn; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_patient_mrn ON public.patient USING btree (mrn);


--
-- Name: idx_patient_names; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_patient_names ON public.patient USING btree (first_name, middle_name, last_name);


--
-- Name: idx_study_patient_completed; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_study_patient_completed ON public.study USING btree (patient_id, completed_at);


--
-- Name: idx_user_role_role_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_role_role_id ON public.user_role USING btree (role);


--
-- Name: idx_user_role_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_role_user_id ON public.user_role USING btree (user_id);


--
-- Name: study study_status_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER study_status_update AFTER UPDATE OF status ON public.study FOR EACH ROW EXECUTE FUNCTION public.notify_status_change('study_channel', 'status_update');


--
-- Name: user_account user_delete; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER user_delete AFTER DELETE ON public.user_account FOR EACH ROW EXECUTE FUNCTION public.notify_delete_with_license_id('user_channel', 'user_delete');


--
-- Name: user_account user_insert; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER user_insert AFTER INSERT ON public.user_account FOR EACH ROW EXECUTE FUNCTION public.notify_change_with_license_id('user_channel', 'user_insert');


--
-- Name: user_account user_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER user_update AFTER UPDATE ON public.user_account FOR EACH ROW EXECUTE FUNCTION public.notify_change_with_license_id('user_channel', 'user_update');


--
-- Name: api_token api_token_device_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.api_token
    ADD CONSTRAINT api_token_device_id_fkey FOREIGN KEY (device_id) REFERENCES public.device(id) ON DELETE CASCADE;


--
-- Name: color_sensitivity_instance color_sensitivity_instance_current_plate_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_instance
    ADD CONSTRAINT color_sensitivity_instance_current_plate_fkey FOREIGN KEY (current_plate) REFERENCES public.color_sensitivity_plate(id);


--
-- Name: color_sensitivity_instance color_sensitivity_instance_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_instance
    ADD CONSTRAINT color_sensitivity_instance_study_id_fkey FOREIGN KEY (study_id) REFERENCES public.study(id) ON DELETE CASCADE;


--
-- Name: color_sensitivity_result color_sensitivity_result_instance_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_result
    ADD CONSTRAINT color_sensitivity_result_instance_id_fkey FOREIGN KEY (instance_id) REFERENCES public.color_sensitivity_instance(id) ON DELETE CASCADE;


--
-- Name: color_sensitivity_result color_sensitivity_result_plate_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.color_sensitivity_result
    ADD CONSTRAINT color_sensitivity_result_plate_id_fkey FOREIGN KEY (plate_id) REFERENCES public.color_sensitivity_plate(id);


--
-- Name: cover_test_instance cover_test_instance_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cover_test_instance
    ADD CONSTRAINT cover_test_instance_study_id_fkey FOREIGN KEY (study_id) REFERENCES public.study(id) ON DELETE CASCADE;


--
-- Name: cover_test_result cover_test_result_instance_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cover_test_result
    ADD CONSTRAINT cover_test_result_instance_id_fkey FOREIGN KEY (instance_id) REFERENCES public.cover_test_instance(id) ON DELETE CASCADE;


--
-- Name: device device_license_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.device
    ADD CONSTRAINT device_license_id_fkey FOREIGN KEY (license_id) REFERENCES public.license(id) ON DELETE CASCADE;


--
-- Name: device device_office_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.device
    ADD CONSTRAINT device_office_id_fkey FOREIGN KEY (office_id) REFERENCES public.office(id) ON DELETE CASCADE;


--
-- Name: device_registration_code device_registration_code_device_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.device_registration_code
    ADD CONSTRAINT device_registration_code_device_id_fkey FOREIGN KEY (device_id) REFERENCES public.device(id) ON DELETE CASCADE;


--
-- Name: dicom_profile dicom_profile_license_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dicom_profile
    ADD CONSTRAINT dicom_profile_license_id_fkey FOREIGN KEY (license_id) REFERENCES public.license(id);


--
-- Name: dicom_profile dicom_profile_office_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dicom_profile
    ADD CONSTRAINT dicom_profile_office_id_fkey FOREIGN KEY (office_id) REFERENCES public.office(id) ON DELETE CASCADE;


--
-- Name: license_feature license_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.license_feature
    ADD CONSTRAINT license_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(id) ON DELETE CASCADE;


--
-- Name: license_feature license_feature_license_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.license_feature
    ADD CONSTRAINT license_feature_license_id_fkey FOREIGN KEY (license_id) REFERENCES public.license(id) ON DELETE CASCADE;


--
-- Name: normal normal_age_bracket_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.normal
    ADD CONSTRAINT normal_age_bracket_fkey FOREIGN KEY (age_bracket) REFERENCES public.age_bracket(id);


--
-- Name: normal_threshold normal_threshold_normal_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.normal_threshold
    ADD CONSTRAINT normal_threshold_normal_id_fkey FOREIGN KEY (normal_id) REFERENCES public.normal(id) ON DELETE CASCADE;


--
-- Name: office office_license_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.office
    ADD CONSTRAINT office_license_id_fkey FOREIGN KEY (license_id) REFERENCES public.license(id) ON DELETE CASCADE;


--
-- Name: patient patient_license_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.patient
    ADD CONSTRAINT patient_license_id_fkey FOREIGN KEY (license_id) REFERENCES public.license(id) ON DELETE CASCADE;


--
-- Name: pupillography_instance pupillometry_instance_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pupillography_instance
    ADD CONSTRAINT pupillometry_instance_study_id_fkey FOREIGN KEY (study_id) REFERENCES public.study(id) ON DELETE CASCADE;


--
-- Name: pupillography_result pupillometry_result_instance_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pupillography_result
    ADD CONSTRAINT pupillometry_result_instance_id_fkey FOREIGN KEY (instance_id) REFERENCES public.pupillography_instance(id) ON DELETE CASCADE;


--
-- Name: strategy_pattern strategy_pattern_pattern_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.strategy_pattern
    ADD CONSTRAINT strategy_pattern_pattern_fkey FOREIGN KEY (pattern) REFERENCES public.pattern(name);


--
-- Name: strategy_pattern strategy_pattern_strategy_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.strategy_pattern
    ADD CONSTRAINT strategy_pattern_strategy_fkey FOREIGN KEY (strategy) REFERENCES public.strategy(name);


--
-- Name: study study_device_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_device_id_fkey FOREIGN KEY (device_id) REFERENCES public.device(id) ON DELETE CASCADE;


--
-- Name: study study_license_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_license_id_fkey FOREIGN KEY (license_id) REFERENCES public.license(id) ON DELETE CASCADE;


--
-- Name: study study_patient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.study
    ADD CONSTRAINT study_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patient(id) ON DELETE CASCADE;


--
-- Name: user_account user_account_license_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_account
    ADD CONSTRAINT user_account_license_id_fkey FOREIGN KEY (license_id) REFERENCES public.license(id) ON DELETE CASCADE;


--
-- Name: user_role user_role_granted_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_role
    ADD CONSTRAINT user_role_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES public.user_account(id) ON DELETE CASCADE;


--
-- Name: user_role user_role_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_role
    ADD CONSTRAINT user_role_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_account(id) ON DELETE CASCADE;


--
-- Name: visual_acuity_instance visual_acuity_instance_current_optotype_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_instance
    ADD CONSTRAINT visual_acuity_instance_current_optotype_fkey FOREIGN KEY (current_optotype) REFERENCES public.visual_acuity_optotype(id);


--
-- Name: visual_acuity_instance visual_acuity_instance_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_instance
    ADD CONSTRAINT visual_acuity_instance_study_id_fkey FOREIGN KEY (study_id) REFERENCES public.study(id) ON DELETE CASCADE;


--
-- Name: visual_acuity_result visual_acuity_result_instance_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_result
    ADD CONSTRAINT visual_acuity_result_instance_id_fkey FOREIGN KEY (instance_id) REFERENCES public.visual_acuity_instance(id) ON DELETE CASCADE;


--
-- Name: visual_acuity_result visual_acuity_result_optotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_acuity_result
    ADD CONSTRAINT visual_acuity_result_optotype_id_fkey FOREIGN KEY (optotype_id) REFERENCES public.visual_acuity_optotype(id) ON DELETE CASCADE;


--
-- Name: visual_field_instance visual_field_instance_pattern_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_instance
    ADD CONSTRAINT visual_field_instance_pattern_fkey FOREIGN KEY (pattern) REFERENCES public.pattern(name);


--
-- Name: visual_field_instance visual_field_instance_strategy_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_instance
    ADD CONSTRAINT visual_field_instance_strategy_fkey FOREIGN KEY (strategy) REFERENCES public.strategy(name);


--
-- Name: visual_field_instance visual_field_instance_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_instance
    ADD CONSTRAINT visual_field_instance_study_id_fkey FOREIGN KEY (study_id) REFERENCES public.study(id) ON DELETE CASCADE;


--
-- Name: visual_field_real_time_results visual_field_real_time_results_instance_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_real_time_results
    ADD CONSTRAINT visual_field_real_time_results_instance_id_fkey FOREIGN KEY (instance_id) REFERENCES public.visual_field_instance(id) ON DELETE CASCADE;


--
-- Name: visual_field_threshold visual_field_threshold_instance_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.visual_field_threshold
    ADD CONSTRAINT visual_field_threshold_instance_id_fkey FOREIGN KEY (instance_id) REFERENCES public.visual_field_instance(id) ON DELETE CASCADE;


--
-- Name: patient; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.patient ENABLE ROW LEVEL SECURITY;

--
-- Name: patient patient_isolation_policy; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY patient_isolation_policy ON public.patient USING ((((current_setting('app.license_id'::text))::uuid = license_id) OR ('ADMIN'::text = ANY ((current_setting('app.roles'::text))::text[]))));


--
-- PostgreSQL database dump complete
--

